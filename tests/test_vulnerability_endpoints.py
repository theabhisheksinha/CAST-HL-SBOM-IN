#!/usr/bin/env python3
"""
Test script to check /cve and /vulnerabilities endpoints for CAST Highlight API
"""

import requests
import json
import sys
import os
from requests.auth import HTTPBasicAuth
from src.sbom_generator import load_config, CASTHighlightAPI, SBOMGenerator

def load_config(config_path: str = "config.json") -> dict:
    """Load configuration from JSON file"""
    if not os.path.exists(config_path):
        print(f"Config file {config_path} not found.")
        sys.exit(1)
    with open(config_path, 'r') as f:
        config = json.load(f)
    return config

def test_vulnerability_endpoints():
    """Test both /cve and /vulnerabilities endpoints"""
    config = load_config('config/config.json')
    
    # Extract configuration from nested structure
    cast_config = config.get('cast_highlight', {})
    auth_config = cast_config.get('authentication', {})
    
    base_url = cast_config.get('api_url', '').rstrip('/')
    if not base_url.endswith('/WS2'):
        base_url = base_url + '/WS2'
    username = auth_config.get('username')
    password = auth_config.get('password')
    company_id = auth_config.get('company_id')
    
    # Setup authentication
    auth = HTTPBasicAuth(username, password)
    headers = {'Content-Type': 'application/json'}
    
    print(f"Testing CAST Highlight API endpoints")
    print(f"Base URL: {base_url}")
    print(f"Company ID: {company_id}")
    print(f"Username: {username}")
    print("-" * 50)
    
    # First, get applications to find an app_id to test with
    print("1. Getting applications list...")
    try:
        apps_url = f"{base_url}/domains/{company_id}/applications/"
        response = requests.get(apps_url, headers=headers, auth=auth)
        response.raise_for_status()
        applications = response.json()
        
        if isinstance(applications, list):
            apps = applications
        elif isinstance(applications, dict) and 'applications' in applications:
            apps = applications['applications']
        else:
            apps = []
        
        if not apps:
            print("❌ No applications found. Cannot test vulnerability endpoints.")
            return
        
        app_id = apps[0].get('id') or apps[0].get('applicationId')
        app_name = apps[0].get('name', 'Unknown')
        print(f"✅ Found application: {app_name} (ID: {app_id})")
        
    except Exception as e:
        print(f"❌ Failed to get applications: {e}")
        return
    
    print("\n2. Testing /vulnerabilities/aggregated/ endpoint...")
    test_aggregated_vulnerabilities_endpoint(base_url, company_id, app_id, headers, auth)
    
    print("\n3. Testing /cve endpoint...")
    test_cve_endpoint(base_url, company_id, app_id, headers, auth)
    
    print("\n4. Testing /vulnerabilities endpoint...")
    test_vulnerabilities_endpoint(base_url, company_id, app_id, headers, auth)
    
    print("\n5. Testing alternative vulnerability endpoints...")
    test_alternative_vulnerability_endpoints(base_url, company_id, app_id, headers, auth)

def test_aggregated_vulnerabilities_endpoint(base_url, company_id, app_id, headers, auth):
    """Test the /vulnerabilities/aggregated/ endpoint"""
    try:
        url = f"{base_url}/domains/{company_id}/applications/{app_id}/vulnerabilities/aggregated/"
        print(f"   URL: {url}")
        
        response = requests.get(url, headers=headers, auth=auth)
        print(f"   Status Code: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"   ✅ Success! Response type: {type(data)}")
            if isinstance(data, list):
                print(f"   📊 Found {len(data)} aggregated vulnerability records")
                if data:
                    print(f"   📋 Sample aggregated vulnerability: {json.dumps(data[0], indent=2)}")
            elif isinstance(data, dict):
                print(f"   📊 Response keys: {list(data.keys())}")
                if 'vulnerabilities' in data:
                    vulns = data['vulnerabilities']
                    print(f"   📋 Found {len(vulns)} vulnerabilities in nested structure")
                    if vulns:
                        print(f"   📋 Sample vulnerability: {json.dumps(vulns[0], indent=2)}")
                else:
                    print(f"   📋 Full response: {json.dumps(data, indent=2)}")
        else:
            print(f"   ❌ Error: {response.text}")
            
    except Exception as e:
        print(f"   ❌ Exception: {e}")

def test_cve_endpoint(base_url, company_id, app_id, headers, auth):
    """Test the /cve endpoint"""
    try:
        url = f"{base_url}/domains/{company_id}/applications/{app_id}/cve"
        print(f"   URL: {url}")
        
        response = requests.get(url, headers=headers, auth=auth)
        print(f"   Status Code: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"   ✅ Success! Response type: {type(data)}")
            if isinstance(data, list):
                print(f"   📊 Found {len(data)} CVE records")
                if data:
                    print(f"   📋 Sample CVE: {json.dumps(data[0], indent=2)}")
            elif isinstance(data, dict):
                print(f"   📊 Response keys: {list(data.keys())}")
                if 'vulnerabilities' in data:
                    vulns = data['vulnerabilities']
                    print(f"   📋 Found {len(vulns)} vulnerabilities in nested structure")
                    if vulns:
                        print(f"   📋 Sample vulnerability: {json.dumps(vulns[0], indent=2)}")
                else:
                    print(f"   📋 Full response: {json.dumps(data, indent=2)}")
        else:
            print(f"   ❌ Error: {response.text}")
            
    except Exception as e:
        print(f"   ❌ Exception: {e}")

def test_vulnerabilities_endpoint(base_url, company_id, app_id, headers, auth):
    """Test the /vulnerabilities endpoint"""
    try:
        url = f"{base_url}/domains/{company_id}/applications/{app_id}/vulnerabilities"
        print(f"   URL: {url}")
        
        response = requests.get(url, headers=headers, auth=auth)
        print(f"   Status Code: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"   ✅ Success! Response type: {type(data)}")
            if isinstance(data, list):
                print(f"   📊 Found {len(data)} vulnerability records")
                if data:
                    print(f"   📋 Sample vulnerability: {json.dumps(data[0], indent=2)}")
            elif isinstance(data, dict):
                print(f"   📊 Response keys: {list(data.keys())}")
                print(f"   📋 Full response: {json.dumps(data, indent=2)}")
        else:
            print(f"   ❌ Error: {response.text}")
            
    except Exception as e:
        print(f"   ❌ Exception: {e}")

def test_alternative_vulnerability_endpoints(base_url, company_id, app_id, headers, auth):
    """Test alternative vulnerability-related endpoints"""
    alternative_endpoints = [
        f"/domains/{company_id}/applications/{app_id}/security",
        f"/domains/{company_id}/applications/{app_id}/security/vulnerabilities",
        f"/domains/{company_id}/applications/{app_id}/security/cve",
        f"/domains/{company_id}/applications/{app_id}/issues",
        f"/domains/{company_id}/applications/{app_id}/issues/security",
        f"/domains/{company_id}/applications/{app_id}/thirdparty/vulnerabilities",
        f"/domains/{company_id}/applications/{app_id}/dependencies/vulnerabilities"
    ]
    
    for endpoint in alternative_endpoints:
        try:
            url = f"{base_url}{endpoint}"
            print(f"   Testing: {endpoint}")
            
            response = requests.get(url, headers=headers, auth=auth)
            print(f"   Status Code: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print(f"   ✅ Success! Response type: {type(data)}")
                if isinstance(data, list):
                    print(f"   📊 Found {len(data)} records")
                elif isinstance(data, dict):
                    print(f"   📊 Response keys: {list(data.keys())}")
            elif response.status_code == 404:
                print(f"   ⚠️  Not Found (404)")
            else:
                print(f"   ❌ Error: {response.text}")
                
        except Exception as e:
            print(f"   ❌ Exception: {e}")
        
        print()

if __name__ == "__main__":
    test_vulnerability_endpoints() 